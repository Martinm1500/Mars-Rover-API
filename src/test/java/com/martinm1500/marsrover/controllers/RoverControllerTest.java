package com.martinm1500.marsrover.controllers;

import com.martinm1500.marsrover.dtos.RoverDTO;
import com.martinm1500.marsrover.exceptions.*;
import com.martinm1500.marsrover.models.Rover;
import com.martinm1500.marsrover.services.RoverServiceImpl;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class RoverControllerTest {

    @InjectMocks
    private RoverController roverController;

    @Mock
    private RoverServiceImpl roverService;

    @Test
    @DisplayName("Create Rover Successfully")
    void testCreateRover() {
        // Arrange
        Long mapId = 1L;
        Rover rover = new Rover(4,4,Rover.NORTH);

        Rover createdRover = new Rover(4,4,Rover.NORTH);
        Long autogeneratedRoverId = 1L;
        createdRover.setId(autogeneratedRoverId);

        RoverDTO roverDTO = RoverDTO.convertToDTO(createdRover);
        roverDTO.setMapId(mapId);

        //Expected service behavior
        when(roverService.createRover(eq(rover), eq(mapId))).thenReturn(createdRover);

        // Act
        ResponseEntity<?> response = roverController.createRover(mapId, rover);

        // Assert
        assertEquals(HttpStatus.CREATED, response.getStatusCode());
        assertEquals(roverDTO, response.getBody());
        assertEquals(mapId, roverDTO.getMapId());
    }

    @Test
    @DisplayName("Create Rover - MapNotFoundException")
    void testCreateRoverMapNotFoundException() {
        //Arrange
        Long mapId = 73L;
        Rover rover = new Rover(4,4,Rover.NORTH);
        String errorMessage = "Could not find map with ID: 73";

        //Expected service behavior
        when(roverService.createRover(rover,mapId)).thenThrow(new MapNotFoundException(errorMessage));

        //Act
        ResponseEntity<?> response = roverController.createRover(mapId, rover);

        //Assert
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
        assertEquals(errorMessage, response.getBody());
    }

    @Test
    @DisplayName("Create Rover - InvalidCoordinatesException(Position Not on Map)")
    void testCreateRoverInvalidCoordinatesExceptionPositionNotOnMap() {
        // Arrange
        Long mapId = 1L;  // ID of a valid map with dimensions 8x8
        Rover rover = new Rover(15,5,Rover.NORTH);

        String errorMessage = "The rover's coordinates do not represent a valid position on the map";

        //Expected service behavior
        when(roverService.createRover(rover,mapId)).thenThrow(new InvalidCoordinatesException(errorMessage));

        //Act
        ResponseEntity<?> response = roverController.createRover(1L, rover);

        //Assert
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals(errorMessage, response.getBody());
    }

    @Test
    @DisplayName("Create Rover - InvalidCoordinatesException (Position Occupied by Obstacle)")
    void testCreateRoverInvalidCoordinatesExceptionPositionOccupiedByObstacle() {
        // Arrange
        Long mapId = 1L;  // ID of a valid map (8x8) with an obstacle at coordinates (1,5)
        Rover rover = new Rover(1,5,Rover.NORTH);

        String errorMessage = "position (1,5) is occupied by an obstacle";

        //Expected service behavior
        when(roverService.createRover(rover,mapId)).thenThrow(new InvalidCoordinatesException(errorMessage));

        //Act
        ResponseEntity<?> response = roverController.createRover(1L, rover);

        //Assert
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals(errorMessage, response.getBody());
    }
    @Test
    @DisplayName("Create Rover - InvalidOrientationException")
    void testCreateRoverInvalidOrientationException() {
        // Arrange
        Long mapId = 1L;  // ID of a valid map (8x8)
        Rover rover = new Rover(1,5,'n');

        String errorMessage = "Invalid rover orientation. Accepted values are: " +
                Rover.NORTH + ", " + Rover.SOUTH + ", " + Rover.EAST + ", or " + Rover.WEST;
        //NORTH (N), SOUTH (S), EAST (E) and WEST (W)

        //Expected service behavior
        when(roverService.createRover(rover,mapId)).thenThrow(new InvalidOrientationException(errorMessage));

        //Act
        ResponseEntity<?> response = roverController.createRover(1L, rover);

        //Assert
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals(errorMessage, response.getBody());
    }

    @Test
    @DisplayName("Create Rover - InvalidOperationException (Map already has a rover)")
    void testCreateRoverInvalidOperationException() {
        // Arrange
        Long mapId = 1L;  // ID of a valid map (8x8)
        Rover rover = new Rover(1,5,'n');

        String errorMessage = "The map already has a rover" ;

        //Expected service behavior
        when(roverService.createRover(rover,mapId)).thenThrow(new InvalidOperationException(errorMessage));

        //Act
        ResponseEntity<?> response = roverController.createRover(1L, rover);

        //Assert
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals(errorMessage, response.getBody());
    }

    //------------------------------------------------------------------------------------------------------------------

    @Test
    @DisplayName("Delete Rover Successfully")
    void testDeleteRover() {
        // Arrange
        Long roverId = 1L;

        // Expected service behavior
        doNothing().when(roverService).deleteRover(roverId);

        // Act
        ResponseEntity<?> response = roverController.deleteRover(roverId);

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals("Rover with ID: " + roverId + " was deleted successfully", response.getBody());
    }

    @Test
    @DisplayName("Delete Rover - RoverNotFoundException")
    void testDeleteRoverRoverNotFoundException() {
        // Arrange
        Long roverId = 1L;
        String errorMessage = "Rover with ID: " + roverId + " not found";

        // Expected service behavior
        doThrow(new RoverNotFoundException(errorMessage)).when(roverService).deleteRover(roverId);

        // Act
        ResponseEntity<?> response = roverController.deleteRover(roverId);

        // Assert
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
        assertEquals(errorMessage, response.getBody());
    }

    //------------------------------------------------------------------------------------------------------------------
    @Test
    @DisplayName("Update Rover Successfully")
    void testUpdateRover() {
        // Arrange
        Long roverId = 1L;
        Rover roverToUpdate = new Rover(4,6,Rover.SOUTH);
        roverToUpdate.setId(roverId);

        RoverDTO updatedRoverDTO = RoverDTO.convertToDTO(roverToUpdate);

        // Expected service behavior
        when(roverService.updateRover(roverToUpdate)).thenReturn(roverToUpdate);

        // Act
        ResponseEntity<?> response = roverController.updateRover(roverToUpdate);

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(updatedRoverDTO, response.getBody());
    }

    @Test
    @DisplayName("Update Rover - RoverNotFoundException")
    void testUpdateRoverNotFound(){
        // Arrange
        Long roverId = 1L;
        Rover roverToUpdate = new Rover(4,6,Rover.SOUTH);
        roverToUpdate.setId(roverId);

        String errorMessage = "Could not find rover with ID: " + roverId;

        // Expected service behavior
        when(roverService.updateRover(roverToUpdate)).thenThrow(new RoverNotFoundException(errorMessage));

        // Act
        ResponseEntity<?> response = roverController.updateRover(roverToUpdate);

        // Assert
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
        assertEquals(errorMessage, response.getBody());
    }


    @Test
    @DisplayName("Update Rover - InvalidCoordinatesException (Position Not on Map)")
    void testUpdateRoverInvalidCoordinatesExceptionPositionNotOnMap() {
        // Arrange
        Long roverId = 1L;
        Rover roverToUpdate = new Rover(23,6,Rover.SOUTH);  //Rover with ID: 1 has a map 8x8
        roverToUpdate.setId(roverId);

        String errorMessage = "The rover's coordinates do not represent a valid position on the map";

        // Expected service behavior
        when(roverService.updateRover(roverToUpdate)).thenThrow(new InvalidCoordinatesException(errorMessage));

        // Act
        ResponseEntity<?> response = roverController.updateRover(roverToUpdate);

        // Assert
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals(errorMessage, response.getBody());
    }

    @Test
    @DisplayName("Update Rover - InvalidCoordinatesException (Position Occupied by Obstacle)")
    void testUpdateRoverInvalidCoordinatesExceptionPositionOccupiedByObstacle() {
        // Arrange
        Long roverId = 1L;
        Rover roverToUpdate = new Rover(3,6,Rover.SOUTH);
        roverToUpdate.setId(roverId);

        String errorMessage = "position (3,6) is occupied by an obstacle";

        // Expected service behavior
        when(roverService.updateRover(roverToUpdate)).thenThrow(new InvalidCoordinatesException(errorMessage));

        // Act
        ResponseEntity<?> response = roverController.updateRover(roverToUpdate);

        // Assert
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals(errorMessage, response.getBody());
    }

    @Test
    @DisplayName("Update Rover - InvalidOrientationException")
    void testUpdateRoverInvalidOrientationException() {
        // Arrange
        Long roverId = 1L;
        Rover roverToUpdate = new Rover(3,6,'s');
        roverToUpdate.setId(roverId);

        String errorMessage = "Invalid rover orientation. Accepted values are: " +
                Rover.NORTH + ", " + Rover.SOUTH + ", " + Rover.EAST + ", or " + Rover.WEST;

        // Expected service behavior
        when(roverService.updateRover(roverToUpdate)).thenThrow(new InvalidOrientationException(errorMessage));

        // Act
        ResponseEntity<?> response = roverController.updateRover(roverToUpdate);

        // Assert
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals(errorMessage, response.getBody());
    }

    //------------------------------------------------------------------------------------------------------------------

    @Test
    @DisplayName("Get Rover Successfully")
    void testGetRover() {
        // Arrange
        Long roverId = 1L;
        Rover obtainedRover = new Rover(4,4,Rover.SOUTH);
        obtainedRover.setId(roverId);

        RoverDTO obtainedRoverDTO = RoverDTO.convertToDTO(obtainedRover);

        // Expected service behavior
        when(roverService.getRover(roverId)).thenReturn(obtainedRover);

        // Act
        ResponseEntity<?> response = roverController.getRover(roverId);

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(obtainedRoverDTO, response.getBody());
    }

    @Test
    @DisplayName("Get Rover - RoverNotFoundException")
    void testGetRoverRoverNotFoundException() {
        // Arrange
        Long roverId = 1L;
        String errorMessage = "Could not find rover with ID: " + roverId;

        // Expected service behavior
        when(roverService.getRover(roverId)).thenThrow(new RoverNotFoundException(errorMessage));

        // Act
        ResponseEntity<?> response = roverController.getRover(roverId);

        // Assert
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
        assertEquals(errorMessage, response.getBody());
    }

    //------------------------------------------------------------------------------------------------------------------
    @Test
    @DisplayName("Get Rover By Map ID Successfully")
    void testGetRoverByMapId() {
        // Arrange
        Long mapId = 1L;
        Rover obtainedRover = new Rover(4,4,Rover.SOUTH);
        obtainedRover.setId(1L);

        RoverDTO obtainedRoverDTO = RoverDTO.convertToDTO(obtainedRover);

        // Expected service behavior
        when(roverService.getRoverByMapId(mapId)).thenReturn(obtainedRover);

        // Act
        ResponseEntity<?> response = roverController.getRoverByMapId(mapId);

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(obtainedRoverDTO, response.getBody());
    }

    @Test
    @DisplayName("Get Rover By Map ID - MapNotFoundException")
    void testGetRoverByMapIdMapNotFoundException() {
        // Arrange
        Long mapId = 1L;
        String errorMessage = "No rover found for map with ID: " + mapId;

        // Expected service behavior
        when(roverService.getRoverByMapId(mapId)).thenThrow(new MapNotFoundException(errorMessage));

        // Act
        ResponseEntity<?> response = roverController.getRoverByMapId(mapId);

        // Assert
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
        assertEquals(errorMessage, response.getBody());
    }
    //------------------------------------------------------------------------------------------------------------------
    @Test
    @DisplayName("Execute Commands Successfully (No Obstacle)")
    void testExecuteCommandsNoObstacle() {
        // Ensure that the RoverController.executeCommands(roverId, commands) method returns HttpStatus.OK (200)
        // Check that the response status is HttpStatus.OK (200) if no obstacle is encountered
    }

    @Test
    @DisplayName("Execute Commands with Obstacle (Conflict)")
    void testExecuteCommandsWithObstacle() {
        // Check that the response status is HttpStatus.CONFLICT (409) if an obstacle is encountered
        // Check that the response body contains information about the obstacle
    }

    @Test
    @DisplayName("Execute Commands - RoverNotFoundException")
    void testExecuteCommandsRoverNotFoundException() {
        // Check that the response status is HttpStatus.NOT_FOUND (404)
        // Check that the response body contains information about the RoverNotFoundException
    }

    @Test
    @DisplayName("Execute Commands - InvalidCommandException")
    void testExecuteCommandsInvalidCommandException() {
        // Check that the response status is HttpStatus.BAD_REQUEST (400)
        // Check that the response body contains information about the InvalidCommandException
    }
}
